// Code generated by ent, DO NOT EDIT.

package post

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPinned holds the string denoting the pinned field in the database.
	FieldPinned = "pinned"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldModerationComment holds the string denoting the moderation_comment field in the database.
	FieldModerationComment = "moderation_comment"
	// FieldIsModerated holds the string denoting the is_moderated field in the database.
	FieldIsModerated = "is_moderated"
	// FieldCategories holds the string denoting the categories field in the database.
	FieldCategories = "categories"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeSavedBy holds the string denoting the saved_by edge name in mutations.
	EdgeSavedBy = "saved_by"
	// EdgeLikedBy holds the string denoting the liked_by edge name in mutations.
	EdgeLikedBy = "liked_by"
	// Table holds the table name of the post in the database.
	Table = "posts"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "posts"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_posts"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "post_comments"
	// SavedByTable is the table that holds the saved_by relation/edge. The primary key declared below.
	SavedByTable = "user_saved_posts"
	// SavedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SavedByInverseTable = "users"
	// LikedByTable is the table that holds the liked_by relation/edge. The primary key declared below.
	LikedByTable = "user_liked_posts"
	// LikedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	LikedByInverseTable = "users"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldPinned,
	FieldTitle,
	FieldContent,
	FieldLink,
	FieldModerationComment,
	FieldIsModerated,
	FieldCategories,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "posts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_posts",
}

var (
	// SavedByPrimaryKey and SavedByColumn2 are the table columns denoting the
	// primary key for the saved_by relation (M2M).
	SavedByPrimaryKey = []string{"user_id", "post_id"}
	// LikedByPrimaryKey and LikedByColumn2 are the table columns denoting the
	// primary key for the liked_by relation (M2M).
	LikedByPrimaryKey = []string{"user_id", "post_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPinned holds the default value on creation for the "pinned" field.
	DefaultPinned bool
	// LinkValidator is a validator for the "link" field. It is called by the builders before save.
	LinkValidator func(string) error
	// DefaultIsModerated holds the default value on creation for the "is_moderated" field.
	DefaultIsModerated bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Categories defines the type for the "categories" enum field.
type Categories string

// Categories values.
const (
	CategoriesRANA              Categories = "RANA"
	CategoriesSIN_SONIDO        Categories = "SIN_SONIDO"
	CategoriesMEME_ARTESANAL    Categories = "MEME_ARTESANAL"
	CategoriesNO_SE_YO          Categories = "NO_SE_YO"
	CategoriesORO               Categories = "ORO"
	CategoriesDIAMANTE          Categories = "DIAMANTE"
	CategoriesMEH               Categories = "MEH"
	CategoriesALERTA_GLONETILLO Categories = "ALERTA_GLONETILLO"
	CategoriesGRR               Categories = "GRR"
	CategoriesENSORDECEDOR      Categories = "ENSORDECEDOR"
	CategoriesRAGUUUL           Categories = "RAGUUUL"
)

func (c Categories) String() string {
	return string(c)
}

// CategoriesValidator is a validator for the "categories" field enum values. It is called by the builders before save.
func CategoriesValidator(c Categories) error {
	switch c {
	case CategoriesRANA, CategoriesSIN_SONIDO, CategoriesMEME_ARTESANAL, CategoriesNO_SE_YO, CategoriesORO, CategoriesDIAMANTE, CategoriesMEH, CategoriesALERTA_GLONETILLO, CategoriesGRR, CategoriesENSORDECEDOR, CategoriesRAGUUUL:
		return nil
	default:
		return fmt.Errorf("post: invalid enum value for categories field: %q", c)
	}
}

// OrderOption defines the ordering options for the Post queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPinned orders the results by the pinned field.
func ByPinned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPinned, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByModerationComment orders the results by the moderation_comment field.
func ByModerationComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModerationComment, opts...).ToFunc()
}

// ByIsModerated orders the results by the is_moderated field.
func ByIsModerated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsModerated, opts...).ToFunc()
}

// ByCategories orders the results by the categories field.
func ByCategories(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategories, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySavedByCount orders the results by saved_by count.
func BySavedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSavedByStep(), opts...)
	}
}

// BySavedBy orders the results by saved_by terms.
func BySavedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSavedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLikedByCount orders the results by liked_by count.
func ByLikedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikedByStep(), opts...)
	}
}

// ByLikedBy orders the results by liked_by terms.
func ByLikedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newSavedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SavedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SavedByTable, SavedByPrimaryKey...),
	)
}
func newLikedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LikedByTable, LikedByPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Categories) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Categories) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Categories(str)
	if err := CategoriesValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Categories", str)
	}
	return nil
}
