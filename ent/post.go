// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/laclipasa/la-clipasa/ent/post"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Pinned holds the value of the "pinned" field.
	Pinned bool `json:"pinned,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content *string `json:"content,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// ModerationComment holds the value of the "moderation_comment" field.
	ModerationComment string `json:"moderation_comment,omitempty"`
	// IsModerated holds the value of the "is_moderated" field.
	IsModerated bool `json:"is_moderated,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories post.Categories `json:"categories,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges        PostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// SavedBy holds the value of the saved_by edge.
	SavedBy []*User `json:"saved_by,omitempty"`
	// LikedBy holds the value of the liked_by edge.
	LikedBy []*User `json:"liked_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedSavedBy map[string][]*User
	namedLikedBy map[string][]*User
}

// SavedByOrErr returns the SavedBy value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) SavedByOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.SavedBy, nil
	}
	return nil, &NotLoadedError{edge: "saved_by"}
}

// LikedByOrErr returns the LikedBy value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) LikedByOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.LikedBy, nil
	}
	return nil, &NotLoadedError{edge: "liked_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldPinned, post.FieldIsModerated:
			values[i] = new(sql.NullBool)
		case post.FieldID:
			values[i] = new(sql.NullInt64)
		case post.FieldTitle, post.FieldContent, post.FieldLink, post.FieldModerationComment, post.FieldCategories:
			values[i] = new(sql.NullString)
		case post.FieldCreatedAt, post.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case post.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case post.FieldPinned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pinned", values[i])
			} else if value.Valid {
				po.Pinned = value.Bool
			}
		case post.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				po.UserID = *value
			}
		case post.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case post.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				po.Content = new(string)
				*po.Content = value.String
			}
		case post.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				po.Link = value.String
			}
		case post.FieldModerationComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field moderation_comment", values[i])
			} else if value.Valid {
				po.ModerationComment = value.String
			}
		case post.FieldIsModerated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_moderated", values[i])
			} else if value.Valid {
				po.IsModerated = value.Bool
			}
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case post.FieldCategories:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value.Valid {
				po.Categories = post.Categories(value.String)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Post.
// This includes values selected through modifiers, order, etc.
func (po *Post) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QuerySavedBy queries the "saved_by" edge of the Post entity.
func (po *Post) QuerySavedBy() *UserQuery {
	return NewPostClient(po.config).QuerySavedBy(po)
}

// QueryLikedBy queries the "liked_by" edge of the Post entity.
func (po *Post) QueryLikedBy() *UserQuery {
	return NewPostClient(po.config).QueryLikedBy(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return NewPostClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("pinned=")
	builder.WriteString(fmt.Sprintf("%v", po.Pinned))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", po.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(po.Title)
	builder.WriteString(", ")
	if v := po.Content; v != nil {
		builder.WriteString("content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(po.Link)
	builder.WriteString(", ")
	builder.WriteString("moderation_comment=")
	builder.WriteString(po.ModerationComment)
	builder.WriteString(", ")
	builder.WriteString("is_moderated=")
	builder.WriteString(fmt.Sprintf("%v", po.IsModerated))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(fmt.Sprintf("%v", po.Categories))
	builder.WriteByte(')')
	return builder.String()
}

// NamedSavedBy returns the SavedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedSavedBy(name string) ([]*User, error) {
	if po.Edges.namedSavedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedSavedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedSavedBy(name string, edges ...*User) {
	if po.Edges.namedSavedBy == nil {
		po.Edges.namedSavedBy = make(map[string][]*User)
	}
	if len(edges) == 0 {
		po.Edges.namedSavedBy[name] = []*User{}
	} else {
		po.Edges.namedSavedBy[name] = append(po.Edges.namedSavedBy[name], edges...)
	}
}

// NamedLikedBy returns the LikedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedLikedBy(name string) ([]*User, error) {
	if po.Edges.namedLikedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedLikedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedLikedBy(name string, edges ...*User) {
	if po.Edges.namedLikedBy == nil {
		po.Edges.namedLikedBy = make(map[string][]*User)
	}
	if len(edges) == 0 {
		po.Edges.namedLikedBy[name] = []*User{}
	} else {
		po.Edges.namedLikedBy[name] = append(po.Edges.namedLikedBy[name], edges...)
	}
}

// Posts is a parsable slice of Post.
type Posts []*Post
