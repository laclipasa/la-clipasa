// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/laclipasa/la-clipasa/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// ProfileImage holds the value of the "profile_image" field.
	ProfileImage *string `json:"profile_image,omitempty"`
	// TwitchID holds the value of the "twitch_id" field.
	TwitchID string `json:"twitch_id,omitempty"`
	// Role holds the value of the "role" field.
	Role user.Role `json:"role,omitempty"`
	// Awards holds the value of the "awards" field.
	Awards []string `json:"awards,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// SavedPosts holds the value of the saved_posts edge.
	SavedPosts []*Post `json:"saved_posts,omitempty"`
	// LikedPosts holds the value of the liked_posts edge.
	LikedPosts []*Post `json:"liked_posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedSavedPosts map[string][]*Post
	namedLikedPosts map[string][]*Post
}

// SavedPostsOrErr returns the SavedPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SavedPostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.SavedPosts, nil
	}
	return nil, &NotLoadedError{edge: "saved_posts"}
}

// LikedPostsOrErr returns the LikedPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedPostsOrErr() ([]*Post, error) {
	if e.loadedTypes[1] {
		return e.LikedPosts, nil
	}
	return nil, &NotLoadedError{edge: "liked_posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAwards:
			values[i] = new([]byte)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldDisplayName, user.FieldProfileImage, user.FieldTwitchID, user.FieldRole:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldProfileImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_image", values[i])
			} else if value.Valid {
				u.ProfileImage = new(string)
				*u.ProfileImage = value.String
			}
		case user.FieldTwitchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitch_id", values[i])
			} else if value.Valid {
				u.TwitchID = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = user.Role(value.String)
			}
		case user.FieldAwards:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field awards", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Awards); err != nil {
					return fmt.Errorf("unmarshal field awards: %w", err)
				}
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QuerySavedPosts queries the "saved_posts" edge of the User entity.
func (u *User) QuerySavedPosts() *PostQuery {
	return NewUserClient(u.config).QuerySavedPosts(u)
}

// QueryLikedPosts queries the "liked_posts" edge of the User entity.
func (u *User) QueryLikedPosts() *PostQuery {
	return NewUserClient(u.config).QueryLikedPosts(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("display_name=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	if v := u.ProfileImage; v != nil {
		builder.WriteString("profile_image=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("twitch_id=")
	builder.WriteString(u.TwitchID)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", ")
	builder.WriteString("awards=")
	builder.WriteString(fmt.Sprintf("%v", u.Awards))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedSavedPosts returns the SavedPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSavedPosts(name string) ([]*Post, error) {
	if u.Edges.namedSavedPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSavedPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSavedPosts(name string, edges ...*Post) {
	if u.Edges.namedSavedPosts == nil {
		u.Edges.namedSavedPosts = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		u.Edges.namedSavedPosts[name] = []*Post{}
	} else {
		u.Edges.namedSavedPosts[name] = append(u.Edges.namedSavedPosts[name], edges...)
	}
}

// NamedLikedPosts returns the LikedPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedLikedPosts(name string) ([]*Post, error) {
	if u.Edges.namedLikedPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedLikedPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedLikedPosts(name string, edges ...*Post) {
	if u.Edges.namedLikedPosts == nil {
		u.Edges.namedLikedPosts = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		u.Edges.namedLikedPosts[name] = []*Post{}
	} else {
		u.Edges.namedLikedPosts[name] = append(u.Edges.namedLikedPosts[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
