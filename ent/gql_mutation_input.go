// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/laclipasa/la-clipasa/ent/post"
	"github.com/laclipasa/la-clipasa/ent/user"
)

// CreateCommentInput represents a mutation input for creating comments.
type CreateCommentInput struct {
	Content   string
	DeletedAt *time.Time
	AuthorID  *int
	PostID    *int
}

// Mutate applies the CreateCommentInput on the CommentMutation builder.
func (i *CreateCommentInput) Mutate(m *CommentMutation) {
	m.SetContent(i.Content)
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the CreateCommentInput on the CommentCreate builder.
func (c *CommentCreate) SetInput(i CreateCommentInput) *CommentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCommentInput represents a mutation input for updating comments.
type UpdateCommentInput struct {
	Content        *string
	ClearDeletedAt bool
	DeletedAt      *time.Time
	ClearAuthor    bool
	AuthorID       *int
	ClearPost      bool
	PostID         *int
}

// Mutate applies the UpdateCommentInput on the CommentMutation builder.
func (i *UpdateCommentInput) Mutate(m *CommentMutation) {
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearAuthor {
		m.ClearAuthor()
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if i.ClearPost {
		m.ClearPost()
	}
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdate builder.
func (c *CommentUpdate) SetInput(i UpdateCommentInput) *CommentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdateOne builder.
func (c *CommentUpdateOne) SetInput(i UpdateCommentInput) *CommentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateNoteInput represents a mutation input for creating notes.
type CreateNoteInput struct {
	Title string
	Body  string
}

// Mutate applies the CreateNoteInput on the NoteMutation builder.
func (i *CreateNoteInput) Mutate(m *NoteMutation) {
	m.SetTitle(i.Title)
	m.SetBody(i.Body)
}

// SetInput applies the change-set in the CreateNoteInput on the NoteCreate builder.
func (c *NoteCreate) SetInput(i CreateNoteInput) *NoteCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateNoteInput represents a mutation input for updating notes.
type UpdateNoteInput struct {
	Title *string
	Body  *string
}

// Mutate applies the UpdateNoteInput on the NoteMutation builder.
func (i *UpdateNoteInput) Mutate(m *NoteMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Body; v != nil {
		m.SetBody(*v)
	}
}

// SetInput applies the change-set in the UpdateNoteInput on the NoteUpdate builder.
func (c *NoteUpdate) SetInput(i UpdateNoteInput) *NoteUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateNoteInput on the NoteUpdateOne builder.
func (c *NoteUpdateOne) SetInput(i UpdateNoteInput) *NoteUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	Pinned            *bool
	Title             string
	Content           *string
	Link              string
	ModerationComment *string
	IsModerated       *bool
	Categories        post.Categories
	DeletedAt         *time.Time
	AuthorID          *int
	CommentIDs        []int
	SavedByIDs        []int
	LikedByIDs        []int
}

// Mutate applies the CreatePostInput on the PostMutation builder.
func (i *CreatePostInput) Mutate(m *PostMutation) {
	if v := i.Pinned; v != nil {
		m.SetPinned(*v)
	}
	m.SetTitle(i.Title)
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	m.SetLink(i.Link)
	if v := i.ModerationComment; v != nil {
		m.SetModerationComment(*v)
	}
	if v := i.IsModerated; v != nil {
		m.SetIsModerated(*v)
	}
	m.SetCategories(i.Categories)
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.SavedByIDs; len(v) > 0 {
		m.AddSavedByIDs(v...)
	}
	if v := i.LikedByIDs; len(v) > 0 {
		m.AddLikedByIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostInput on the PostCreate builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	Pinned                 *bool
	Title                  *string
	ClearContent           bool
	Content                *string
	Link                   *string
	ClearModerationComment bool
	ModerationComment      *string
	IsModerated            *bool
	Categories             *post.Categories
	ClearDeletedAt         bool
	DeletedAt              *time.Time
	ClearAuthor            bool
	AuthorID               *int
	ClearComments          bool
	AddCommentIDs          []int
	RemoveCommentIDs       []int
	ClearSavedBy           bool
	AddSavedByIDs          []int
	RemoveSavedByIDs       []int
	ClearLikedBy           bool
	AddLikedByIDs          []int
	RemoveLikedByIDs       []int
}

// Mutate applies the UpdatePostInput on the PostMutation builder.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if v := i.Pinned; v != nil {
		m.SetPinned(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearContent {
		m.ClearContent()
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.Link; v != nil {
		m.SetLink(*v)
	}
	if i.ClearModerationComment {
		m.ClearModerationComment()
	}
	if v := i.ModerationComment; v != nil {
		m.SetModerationComment(*v)
	}
	if v := i.IsModerated; v != nil {
		m.SetIsModerated(*v)
	}
	if v := i.Categories; v != nil {
		m.SetCategories(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearAuthor {
		m.ClearAuthor()
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if i.ClearComments {
		m.ClearComments()
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
	if i.ClearSavedBy {
		m.ClearSavedBy()
	}
	if v := i.AddSavedByIDs; len(v) > 0 {
		m.AddSavedByIDs(v...)
	}
	if v := i.RemoveSavedByIDs; len(v) > 0 {
		m.RemoveSavedByIDs(v...)
	}
	if i.ClearLikedBy {
		m.ClearLikedBy()
	}
	if v := i.AddLikedByIDs; len(v) > 0 {
		m.AddLikedByIDs(v...)
	}
	if v := i.RemoveLikedByIDs; len(v) > 0 {
		m.RemoveLikedByIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdate builder.
func (c *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdateOne builder.
func (c *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	DisplayName  string
	ProfileImage *string
	TwitchID     string
	Role         *user.Role
	Awards       []string
	DeletedAt    *time.Time
	SavedPostIDs []int
	LikedPostIDs []int
	PostIDs      []int
	CommentIDs   []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetDisplayName(i.DisplayName)
	if v := i.ProfileImage; v != nil {
		m.SetProfileImage(*v)
	}
	m.SetTwitchID(i.TwitchID)
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Awards; v != nil {
		m.SetAwards(v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.SavedPostIDs; len(v) > 0 {
		m.AddSavedPostIDs(v...)
	}
	if v := i.LikedPostIDs; len(v) > 0 {
		m.AddLikedPostIDs(v...)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	DisplayName        *string
	ClearProfileImage  bool
	ProfileImage       *string
	TwitchID           *string
	Role               *user.Role
	ClearAwards        bool
	Awards             []string
	AppendAwards       []string
	ClearDeletedAt     bool
	DeletedAt          *time.Time
	ClearSavedPosts    bool
	AddSavedPostIDs    []int
	RemoveSavedPostIDs []int
	ClearLikedPosts    bool
	AddLikedPostIDs    []int
	RemoveLikedPostIDs []int
	ClearPosts         bool
	AddPostIDs         []int
	RemovePostIDs      []int
	ClearComments      bool
	AddCommentIDs      []int
	RemoveCommentIDs   []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearProfileImage {
		m.ClearProfileImage()
	}
	if v := i.ProfileImage; v != nil {
		m.SetProfileImage(*v)
	}
	if v := i.TwitchID; v != nil {
		m.SetTwitchID(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearAwards {
		m.ClearAwards()
	}
	if v := i.Awards; v != nil {
		m.SetAwards(v)
	}
	if i.AppendAwards != nil {
		m.AppendAwards(i.Awards)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearSavedPosts {
		m.ClearSavedPosts()
	}
	if v := i.AddSavedPostIDs; len(v) > 0 {
		m.AddSavedPostIDs(v...)
	}
	if v := i.RemoveSavedPostIDs; len(v) > 0 {
		m.RemoveSavedPostIDs(v...)
	}
	if i.ClearLikedPosts {
		m.ClearLikedPosts()
	}
	if v := i.AddLikedPostIDs; len(v) > 0 {
		m.AddLikedPostIDs(v...)
	}
	if v := i.RemoveLikedPostIDs; len(v) > 0 {
		m.RemoveLikedPostIDs(v...)
	}
	if i.ClearPosts {
		m.ClearPosts()
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
	if i.ClearComments {
		m.ClearComments()
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
