// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/laclipasa/la-clipasa/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// ProfileImage applies equality check predicate on the "profile_image" field. It's identical to ProfileImageEQ.
func ProfileImage(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImage, v))
}

// TwitchID applies equality check predicate on the "twitch_id" field. It's identical to TwitchIDEQ.
func TwitchID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwitchID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDisplayName, v))
}

// ProfileImageEQ applies the EQ predicate on the "profile_image" field.
func ProfileImageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImage, v))
}

// ProfileImageNEQ applies the NEQ predicate on the "profile_image" field.
func ProfileImageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfileImage, v))
}

// ProfileImageIn applies the In predicate on the "profile_image" field.
func ProfileImageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProfileImage, vs...))
}

// ProfileImageNotIn applies the NotIn predicate on the "profile_image" field.
func ProfileImageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProfileImage, vs...))
}

// ProfileImageGT applies the GT predicate on the "profile_image" field.
func ProfileImageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProfileImage, v))
}

// ProfileImageGTE applies the GTE predicate on the "profile_image" field.
func ProfileImageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProfileImage, v))
}

// ProfileImageLT applies the LT predicate on the "profile_image" field.
func ProfileImageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProfileImage, v))
}

// ProfileImageLTE applies the LTE predicate on the "profile_image" field.
func ProfileImageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProfileImage, v))
}

// ProfileImageContains applies the Contains predicate on the "profile_image" field.
func ProfileImageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProfileImage, v))
}

// ProfileImageHasPrefix applies the HasPrefix predicate on the "profile_image" field.
func ProfileImageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProfileImage, v))
}

// ProfileImageHasSuffix applies the HasSuffix predicate on the "profile_image" field.
func ProfileImageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProfileImage, v))
}

// ProfileImageIsNil applies the IsNil predicate on the "profile_image" field.
func ProfileImageIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldProfileImage))
}

// ProfileImageNotNil applies the NotNil predicate on the "profile_image" field.
func ProfileImageNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldProfileImage))
}

// ProfileImageEqualFold applies the EqualFold predicate on the "profile_image" field.
func ProfileImageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProfileImage, v))
}

// ProfileImageContainsFold applies the ContainsFold predicate on the "profile_image" field.
func ProfileImageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProfileImage, v))
}

// TwitchIDEQ applies the EQ predicate on the "twitch_id" field.
func TwitchIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwitchID, v))
}

// TwitchIDNEQ applies the NEQ predicate on the "twitch_id" field.
func TwitchIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTwitchID, v))
}

// TwitchIDIn applies the In predicate on the "twitch_id" field.
func TwitchIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTwitchID, vs...))
}

// TwitchIDNotIn applies the NotIn predicate on the "twitch_id" field.
func TwitchIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTwitchID, vs...))
}

// TwitchIDGT applies the GT predicate on the "twitch_id" field.
func TwitchIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTwitchID, v))
}

// TwitchIDGTE applies the GTE predicate on the "twitch_id" field.
func TwitchIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTwitchID, v))
}

// TwitchIDLT applies the LT predicate on the "twitch_id" field.
func TwitchIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTwitchID, v))
}

// TwitchIDLTE applies the LTE predicate on the "twitch_id" field.
func TwitchIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTwitchID, v))
}

// TwitchIDContains applies the Contains predicate on the "twitch_id" field.
func TwitchIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTwitchID, v))
}

// TwitchIDHasPrefix applies the HasPrefix predicate on the "twitch_id" field.
func TwitchIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTwitchID, v))
}

// TwitchIDHasSuffix applies the HasSuffix predicate on the "twitch_id" field.
func TwitchIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTwitchID, v))
}

// TwitchIDEqualFold applies the EqualFold predicate on the "twitch_id" field.
func TwitchIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTwitchID, v))
}

// TwitchIDContainsFold applies the ContainsFold predicate on the "twitch_id" field.
func TwitchIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTwitchID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// AwardsIsNil applies the IsNil predicate on the "awards" field.
func AwardsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAwards))
}

// AwardsNotNil applies the NotNil predicate on the "awards" field.
func AwardsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAwards))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// HasSavedPosts applies the HasEdge predicate on the "saved_posts" edge.
func HasSavedPosts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SavedPostsTable, SavedPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSavedPostsWith applies the HasEdge predicate on the "saved_posts" edge with a given conditions (other predicates).
func HasSavedPostsWith(preds ...predicate.Post) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSavedPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikedPosts applies the HasEdge predicate on the "liked_posts" edge.
func HasLikedPosts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LikedPostsTable, LikedPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikedPostsWith applies the HasEdge predicate on the "liked_posts" edge with a given conditions (other predicates).
func HasLikedPostsWith(preds ...predicate.Post) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLikedPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
